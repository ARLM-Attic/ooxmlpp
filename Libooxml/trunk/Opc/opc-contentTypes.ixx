// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef OPC_CONTENT_TYPES_IXX
#define OPC_CONTENT_TYPES_IXX

// Begin prologue.
//
//
// End prologue.

namespace package
{
  namespace content_types
  {
    // CT_Types
    // 

    inline
    const CT_Types::Default_sequence& CT_Types::
    Default () const
    {
      return this->Default_;
    }

    inline
    CT_Types::Default_sequence& CT_Types::
    Default ()
    {
      return this->Default_;
    }

    inline
    void CT_Types::
    Default (const Default_sequence& s)
    {
      this->Default_ = s;
    }

    inline
    const CT_Types::Override_sequence& CT_Types::
    Override () const
    {
      return this->Override_;
    }

    inline
    CT_Types::Override_sequence& CT_Types::
    Override ()
    {
      return this->Override_;
    }

    inline
    void CT_Types::
    Override (const Override_sequence& s)
    {
      this->Override_ = s;
    }


    // CT_Default
    // 

    inline
    const CT_Default::Extension_type& CT_Default::
    Extension () const
    {
      return this->Extension_.get ();
    }

    inline
    CT_Default::Extension_type& CT_Default::
    Extension ()
    {
      return this->Extension_.get ();
    }

    inline
    void CT_Default::
    Extension (const Extension_type& x)
    {
      this->Extension_.set (x);
    }

    inline
    void CT_Default::
    Extension (::std::auto_ptr< Extension_type > x)
    {
      this->Extension_.set (x);
    }

    inline
    const CT_Default::ContentType_type& CT_Default::
    ContentType () const
    {
      return this->ContentType_.get ();
    }

    inline
    CT_Default::ContentType_type& CT_Default::
    ContentType ()
    {
      return this->ContentType_.get ();
    }

    inline
    void CT_Default::
    ContentType (const ContentType_type& x)
    {
      this->ContentType_.set (x);
    }

    inline
    void CT_Default::
    ContentType (::std::auto_ptr< ContentType_type > x)
    {
      this->ContentType_.set (x);
    }


    // CT_Override
    // 

    inline
    const CT_Override::ContentType_type& CT_Override::
    ContentType () const
    {
      return this->ContentType_.get ();
    }

    inline
    CT_Override::ContentType_type& CT_Override::
    ContentType ()
    {
      return this->ContentType_.get ();
    }

    inline
    void CT_Override::
    ContentType (const ContentType_type& x)
    {
      this->ContentType_.set (x);
    }

    inline
    void CT_Override::
    ContentType (::std::auto_ptr< ContentType_type > x)
    {
      this->ContentType_.set (x);
    }

    inline
    const CT_Override::PartName_type& CT_Override::
    PartName () const
    {
      return this->PartName_.get ();
    }

    inline
    CT_Override::PartName_type& CT_Override::
    PartName ()
    {
      return this->PartName_.get ();
    }

    inline
    void CT_Override::
    PartName (const PartName_type& x)
    {
      this->PartName_.set (x);
    }

    inline
    void CT_Override::
    PartName (::std::auto_ptr< PartName_type > x)
    {
      this->PartName_.set (x);
    }


    // ST_ContentType
    // 


    // ST_Extension
    // 
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // OPC_CONTENT_TYPES_IXX
