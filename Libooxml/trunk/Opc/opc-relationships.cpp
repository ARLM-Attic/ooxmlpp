// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "opc-relationships.h"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace package
{
  namespace relationships
  {
    // CT_Relationships
    //

    CT_Relationships::
    CT_Relationships ()
    : ::xml_schema::type (),
      Relationship_ (::xml_schema::flags (), this)
    {
    }

    CT_Relationships::
    CT_Relationships (const CT_Relationships& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Relationship_ (x.Relationship_, f, this)
    {
    }

    CT_Relationships::
    CT_Relationships (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Relationship_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CT_Relationships::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Relationship
        //
        if (n.name () == L"Relationship" && n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
        {
          ::std::auto_ptr< Relationship_type > r (
            Relationship_traits::create (i, f, this));

          this->Relationship_.push_back (r);
          continue;
        }

        break;
      }
    }

    CT_Relationships* CT_Relationships::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CT_Relationships (*this, f, c);
    }

    CT_Relationships::
    ~CT_Relationships ()
    {
    }

    // CT_Relationship
    //

    CT_Relationship::
    CT_Relationship (const Target_type& Target,
                     const Type_type& Type,
                     const Id_type& Id)
    : ::xml_schema::string (),
      TargetMode_ (::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Type_ (Type, ::xml_schema::flags (), this),
      Id_ (Id, ::xml_schema::flags (), this)
    {
    }

    CT_Relationship::
    CT_Relationship (const wchar_t* _xsd_string_base,
                     const Target_type& Target,
                     const Type_type& Type,
                     const Id_type& Id)
    : ::xml_schema::string (_xsd_string_base),
      TargetMode_ (::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Type_ (Type, ::xml_schema::flags (), this),
      Id_ (Id, ::xml_schema::flags (), this)
    {
    }

    CT_Relationship::
    CT_Relationship (const ::std::wstring& _xsd_string_base,
                     const Target_type& Target,
                     const Type_type& Type,
                     const Id_type& Id)
    : ::xml_schema::string (_xsd_string_base),
      TargetMode_ (::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Type_ (Type, ::xml_schema::flags (), this),
      Id_ (Id, ::xml_schema::flags (), this)
    {
    }

    CT_Relationship::
    CT_Relationship (const ::xml_schema::string& _xsd_string_base,
                     const Target_type& Target,
                     const Type_type& Type,
                     const Id_type& Id)
    : ::xml_schema::string (_xsd_string_base),
      TargetMode_ (::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Type_ (Type, ::xml_schema::flags (), this),
      Id_ (Id, ::xml_schema::flags (), this)
    {
    }

    CT_Relationship::
    CT_Relationship (const CT_Relationship& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      TargetMode_ (x.TargetMode_, f, this),
      Target_ (x.Target_, f, this),
      Type_ (x.Type_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    CT_Relationship::
    CT_Relationship (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      TargetMode_ (f, this),
      Target_ (f, this),
      Type_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, true);
        this->parse (p, f);
      }
    }

    void CT_Relationship::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"TargetMode" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< TargetMode_type > r (
            TargetMode_traits::create (i, f, this));

          this->TargetMode_.set (r);
          continue;
        }

        if (n.name () == L"Target" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Target_type > r (
            Target_traits::create (i, f, this));

          this->Target_.set (r);
          continue;
        }

        if (n.name () == L"Type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type_type > r (
            Type_traits::create (i, f, this));

          this->Type_.set (r);
          continue;
        }

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id_.set (r);
          continue;
        }
      }

      if (!Target_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Target",
          L"");
      }

      if (!Type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Type",
          L"");
      }

      if (!Id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Id",
          L"");
      }
    }

    CT_Relationship* CT_Relationship::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CT_Relationship (*this, f, c);
    }

    CT_Relationship::
    ~CT_Relationship ()
    {
    }

    // ST_TargetMode
    //

    ST_TargetMode::
    ST_TargetMode (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_ST_TargetMode_convert ();
    }

    ST_TargetMode::
    ST_TargetMode (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_ST_TargetMode_convert ();
    }

    ST_TargetMode::
    ST_TargetMode (const ::std::wstring& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_ST_TargetMode_convert ();
    }

    ST_TargetMode* ST_TargetMode::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ST_TargetMode (*this, f, c);
    }

    ST_TargetMode::value ST_TargetMode::
    _xsd_ST_TargetMode_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ST_TargetMode_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ST_TargetMode_indexes_,
                        _xsd_ST_TargetMode_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_ST_TargetMode_indexes_ + 2 || _xsd_ST_TargetMode_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ST_TargetMode::
    _xsd_ST_TargetMode_literals_[2] =
    {
      L"External",
      L"Internal"
    };

    const ST_TargetMode::value ST_TargetMode::
    _xsd_ST_TargetMode_indexes_[2] =
    {
      ::package::relationships::ST_TargetMode::External,
      ::package::relationships::ST_TargetMode::Internal
    };
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace package
{
  namespace relationships
  {
    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (const ::std::wstring& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (const ::std::wstring& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (const ::std::wstring& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationships (isrc, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationships (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationships (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationships (isrc, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationships (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationships (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
        ::package::relationships::Relationships (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
          ::package::relationships::Relationships (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"Relationships" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
          ::xsd::cxx::tree::traits< ::package::relationships::CT_Relationships, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Relationships",
        L"http://schemas.openxmlformats.org/package/2006/relationships");
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationships >
    Relationships (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == L"Relationships" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        ::std::auto_ptr< ::package::relationships::CT_Relationships > r (
          ::xsd::cxx::tree::traits< ::package::relationships::CT_Relationships, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Relationships",
        L"http://schemas.openxmlformats.org/package/2006/relationships");
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (const ::std::wstring& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (const ::std::wstring& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (const ::std::wstring& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationship (isrc, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationship (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::package::relationships::Relationship (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationship (isrc, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationship (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::package::relationships::Relationship (isrc, h, f, p);
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
        ::package::relationships::Relationship (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
          ::package::relationships::Relationship (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"Relationship" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
          ::xsd::cxx::tree::traits< ::package::relationships::CT_Relationship, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Relationship",
        L"http://schemas.openxmlformats.org/package/2006/relationships");
    }

    ::std::auto_ptr< ::package::relationships::CT_Relationship >
    Relationship (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == L"Relationship" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        ::std::auto_ptr< ::package::relationships::CT_Relationship > r (
          ::xsd::cxx::tree::traits< ::package::relationships::CT_Relationship, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Relationship",
        L"http://schemas.openxmlformats.org/package/2006/relationships");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace package
{
  namespace relationships
  {
    void
    Relationships (::std::ostream& o,
                   const ::package::relationships::CT_Relationships& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Relationships (::std::ostream& o,
                   const ::package::relationships::CT_Relationships& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationships (::std::ostream& o,
                   const ::package::relationships::CT_Relationships& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationships (::xercesc::XMLFormatTarget& t,
                   const ::package::relationships::CT_Relationships& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Relationships (::xercesc::XMLFormatTarget& t,
                   const ::package::relationships::CT_Relationships& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationships (::xercesc::XMLFormatTarget& t,
                   const ::package::relationships::CT_Relationships& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationships (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationships (::xercesc::DOMDocument& d,
                   const ::package::relationships::CT_Relationships& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"Relationships" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
          n.name (),
          n.namespace_ (),
          L"Relationships",
          L"http://schemas.openxmlformats.org/package/2006/relationships");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Relationships (const ::package::relationships::CT_Relationships& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< wchar_t > (
          L"Relationships",
          L"http://schemas.openxmlformats.org/package/2006/relationships",
          m, f));

      ::package::relationships::Relationships (*d, s, f);
      return d;
    }

    void
    Relationship (::std::ostream& o,
                  const ::package::relationships::CT_Relationship& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Relationship (::std::ostream& o,
                  const ::package::relationships::CT_Relationship& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationship (::std::ostream& o,
                  const ::package::relationships::CT_Relationship& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationship (::xercesc::XMLFormatTarget& t,
                  const ::package::relationships::CT_Relationship& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Relationship (::xercesc::XMLFormatTarget& t,
                  const ::package::relationships::CT_Relationship& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationship (::xercesc::XMLFormatTarget& t,
                  const ::package::relationships::CT_Relationship& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::package::relationships::Relationship (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Relationship (::xercesc::DOMDocument& d,
                  const ::package::relationships::CT_Relationship& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"Relationship" &&
          n.namespace_ () == L"http://schemas.openxmlformats.org/package/2006/relationships")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
          n.name (),
          n.namespace_ (),
          L"Relationship",
          L"http://schemas.openxmlformats.org/package/2006/relationships");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Relationship (const ::package::relationships::CT_Relationship& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< wchar_t > (
          L"Relationship",
          L"http://schemas.openxmlformats.org/package/2006/relationships",
          m, f));

      ::package::relationships::Relationship (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const CT_Relationships& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Relationship
      //
      for (CT_Relationships::Relationship_const_iterator
           b (i.Relationship ().begin ()), n (i.Relationship ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"Relationship",
            L"http://schemas.openxmlformats.org/package/2006/relationships",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const CT_Relationship& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);

      // TargetMode
      //
      if (i.TargetMode ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"TargetMode",
            e));

        a << *i.TargetMode ();
      }

      // Target
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Target",
            e));

        a << i.Target ();
      }

      // Type
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Type",
            e));

        a << i.Type ();
      }

      // Id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << i.Id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ST_TargetMode& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ST_TargetMode& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ST_TargetMode& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

