// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef OPC_RELATIONSHIPS_IXX
#define OPC_RELATIONSHIPS_IXX

// Begin prologue.
//
//
// End prologue.

namespace package
{
  namespace relationships
  {
    // CT_Relationships
    // 

    inline
    const CT_Relationships::Relationship_sequence& CT_Relationships::
    Relationship () const
    {
      return this->Relationship_;
    }

    inline
    CT_Relationships::Relationship_sequence& CT_Relationships::
    Relationship ()
    {
      return this->Relationship_;
    }

    inline
    void CT_Relationships::
    Relationship (const Relationship_sequence& s)
    {
      this->Relationship_ = s;
    }


    // CT_Relationship
    // 

    inline
    const CT_Relationship::TargetMode_optional& CT_Relationship::
    TargetMode () const
    {
      return this->TargetMode_;
    }

    inline
    CT_Relationship::TargetMode_optional& CT_Relationship::
    TargetMode ()
    {
      return this->TargetMode_;
    }

    inline
    void CT_Relationship::
    TargetMode (const TargetMode_type& x)
    {
      this->TargetMode_.set (x);
    }

    inline
    void CT_Relationship::
    TargetMode (const TargetMode_optional& x)
    {
      this->TargetMode_ = x;
    }

    inline
    void CT_Relationship::
    TargetMode (::std::auto_ptr< TargetMode_type > x)
    {
      this->TargetMode_.set (x);
    }

    inline
    const CT_Relationship::Target_type& CT_Relationship::
    Target () const
    {
      return this->Target_.get ();
    }

    inline
    CT_Relationship::Target_type& CT_Relationship::
    Target ()
    {
      return this->Target_.get ();
    }

    inline
    void CT_Relationship::
    Target (const Target_type& x)
    {
      this->Target_.set (x);
    }

    inline
    void CT_Relationship::
    Target (::std::auto_ptr< Target_type > x)
    {
      this->Target_.set (x);
    }

    inline
    const CT_Relationship::Type_type& CT_Relationship::
    Type () const
    {
      return this->Type_.get ();
    }

    inline
    CT_Relationship::Type_type& CT_Relationship::
    Type ()
    {
      return this->Type_.get ();
    }

    inline
    void CT_Relationship::
    Type (const Type_type& x)
    {
      this->Type_.set (x);
    }

    inline
    void CT_Relationship::
    Type (::std::auto_ptr< Type_type > x)
    {
      this->Type_.set (x);
    }

    inline
    const CT_Relationship::Id_type& CT_Relationship::
    Id () const
    {
      return this->Id_.get ();
    }

    inline
    CT_Relationship::Id_type& CT_Relationship::
    Id ()
    {
      return this->Id_.get ();
    }

    inline
    void CT_Relationship::
    Id (const Id_type& x)
    {
      this->Id_.set (x);
    }

    inline
    void CT_Relationship::
    Id (::std::auto_ptr< Id_type > x)
    {
      this->Id_.set (x);
    }


    // ST_TargetMode
    // 

    inline
    ST_TargetMode::
    ST_TargetMode (value v)
    : ::xml_schema::string (_xsd_ST_TargetMode_literals_[v])
    {
    }

    inline
    ST_TargetMode::
    ST_TargetMode (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    inline
    ST_TargetMode::
    ST_TargetMode (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    inline
    ST_TargetMode::
    ST_TargetMode (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    inline
    ST_TargetMode::
    ST_TargetMode (const ST_TargetMode& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    inline
    ST_TargetMode& ST_TargetMode::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_ST_TargetMode_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // OPC_RELATIONSHIPS_IXX
